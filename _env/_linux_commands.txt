Worked with an original set of instructions produced for windows server.
This time, just used my laptop (running windows 10).
Basically, you install WSL (windows subsystem linux)
And run everything from the WSL CLI (command line interface).

End result is a project folder, named <app-name>, containing:

	- app (folder)
		- views.py
	- run.py (python file: runs app/views.py)
	- requirements.txt (text file: lists python requirements)
	- Procfile (gunicorn file: thing I don't really understand used for deployment configuration)

STEPS, AFTER INSTALLING WSL USING _Install_WSL.bat in this folder.

1. Run your linux terminal (e.g. Ubuntu 20.04)

2. Ensure ubuntu is updated, repeat this first if any steps below fail
	$ sudo apt update

3. Test that GIT is installed by running:
	$ git --version
	- GIT is preinstalled on mine

4. Test that python3 is installed by running:
	$ python3 -V
	- Python 3.8.2 is preinstalled on mine

5. Create a new virtual environment:
	$ sudo apt install python3-pip
	$ sudo apt install python3-virtualenv
	$ virtualenv <name-of-your-custom-venv>

6. Activate virtual environment
	$ . <name-of-your-custom-venv>/bin/activate

7. Create project folder, add to it the requirements.txt and enter requirements
	$ mkdir <app-name>
	$ cd <app-name>
	$ touch requirements.txt
	$ sudo nano requirements.txt
	# enter the list of requirements, e.g. pandas numpy, on individual lines
	# hit ctrl x to escape, it will prompt you to type Y to save the file

8. Install requirements to virtual env
	$ pip3 install -r requirements.txt

9. Create flask app in a folder by the name of <your_app_name>. No hypens!
	$ mkdir app
	$ cd app
	$ touch views.py
	$ cd ../
	$ cd <app-name>
	$ touch run.py
	# contents of views.py:
		from flask import Flask
 		app = Flask(__name__)
		@app.route('/')
		def index():
		    return '<h1>I am the front end!</h1>'
	# contents of run.py:
		from app.views import app
		if __name__ == "__main__":
		    app.run()
	# test app is functional using:
	$ python3 <name-of-your-app>-run.py

10. Develop the app. Add to the requirements.txt as you go (repeating step 8)
	# ...or, you can use pip3 to install requirements and then save to the file using:
	$ pip3 freeze > requirements.txt

11. Create a gunicorn procfile to house commands for heroku.
	$ echo web: gunicorn <name-of-your-app>:run
	$ echo web: gunicorn run:<name-of-your-app> >> Procfile

12. Install heroku
	$ curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
	- If other issues see: https://devcenter.heroku.com/articles/heroku-cli
	- Create a free account: https://www.heroku.com/

13. Login to Heroku from terminal:
	$ heroku login
	- Chrome should pop open, follow instructions on screen.

14. Create your app on Heroku
	$ heroku create <name-of-your-heroku-app>

15. Add a GIT remote to this Heroku app
	$ git init
	$ heroku git:remote -a <name-of-your-heroku-app>
	$ git remote -v
	$ git config --global user.email "<your-email-address>"
	$ git config --global user.name "<your-name>"

16. Deploy your app!
	$ git add .
	$ git commit -m "<some-descriptive-text-eg-Init-deploy>"
	$ git push heroku master

17. Check that your app made it onto a Heroku dyno:
	https://<name-of-your-heroku-app>.herokuapp.com

18. Basic app management / deletion:
	Deactivate...
	$ heroku ps:scale web=0
	Reactivate...
	$ heroku ps:scale web=1
	Delete...
	$ heroku apps:destroy <heroku-app-name>